type: edu
custom_name: stage2
files:
- name: src/search/Main.java
  visible: true
  text: |
    package search;

    import java.util.Objects;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            final Scanner scanner = new Scanner(System.in);

            String[] line = scanner.nextLine().split("\\s");
            String search = scanner.nextLine();

            scanner.close();

            int i = 1;
            boolean found = false;
            for (String word : line) {
                if (Objects.equals(search, word)) {
                    found = true;
                    break;
                }
                i++;
            }

            System.out.println(found ? i : "Not found");
        }
    }
  learner_created: false
- name: src/search/HashTable.java
  visible: true
  text: |
    package search;

    public class HashTable<T> {
        private int size;
        private TableEntry[] table;
        private int usedSize;

        public HashTable(int size) {
            this.size = size;
            table = new TableEntry[size];
            usedSize = 0;
        }

        public boolean put(int key, T value) {
            if (usedSize == size) rehash();

            int index = findKey(key);

            if (index == -1) {
                return false;
            }

            table[index] = new TableEntry(key, value);
            usedSize++;

            return true;
        }

        public int get(int key, T value) {
            int idx = findKey(key);

            if (idx == -1 || table[idx] == null) {
                return -1;
            }

            return idx;
        }

        private int findKey(int key) {
            int hash = key % size;

            while (!(table[hash] == null || table[hash].getKey() == key)) {
                hash = (hash + 1) % size;

                if (hash == key % size) {
                    return -1;
                }
            }

            return hash;
        }

        private void rehash() {
            final int scalingFactor = 2;

            TableEntry[] oldTable = table;

            size *= scalingFactor;
            this.table = new TableEntry[size];
            usedSize = 0;

            for (TableEntry entry : oldTable) {
                this.put(entry.getKey(), (T) entry.getValue());
            }
        }

        @Override
        public String toString() {
            StringBuilder tableStringBuilder = new StringBuilder();

            for (int i = 0; i < table.length; i++) {
                if (table[i] == null) {
                    tableStringBuilder.append(i + ": null");
                } else {
                    tableStringBuilder.append(i + ": key=" + table[i].getKey()
                            + ", value=" + table[i].getValue());
                }

                if (i < table.length - 1) {
                    tableStringBuilder.append("\n");
                }
            }

            return tableStringBuilder.toString();
        }

        private static int createKey(String word, int length) {
            String ret = "";
            int i = 0;
            while (ret.length() < length && i < word.length()) {
                char ch = word.toCharArray()[i++];
                ret += (int) ch;
            }

            while (ret.length() < length) {
                ret = "0" + ret;
            }

            if (ret.length() > length) {
                ret = ret.substring(0, length);
            }

            return Integer.parseInt(ret);
        }
    }
  learner_created: false
- name: src/search/TableEntry.java
  visible: true
  text: |
    package search;

    public class TableEntry<T> {
        private final int key;
        private final T value;

        public TableEntry(int key, T value) {
            this.key = key;
            this.value = value;
        }

        public int getKey() {
            return key;
        }

        public T getValue() {
            return value;
        }
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import search.Main;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedList;
    import java.util.List;

    class TestClue {
        int referencesCount, requestsCount;
        String input;

        TestClue(int referencesCount, int requestsCount, String input) {
            this.referencesCount = referencesCount;
            this.requestsCount = requestsCount;
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {

        private static String testCaseInput1 = "1\n" +
            "John\n" +
            "1\n" +
            "this text will definitely be no match";

        private static String testCaseInput2 = "3\n"
            + "john smith smith@gmail.com\n"
            + "John lock john_lock@somecompany.com\n"
            + "help me iamaprogrammer@gmail.com\n"
            + "4\n"
            + "john\n"
            + "Somecompany\n"
            + "@\n"
            + "this text will definitely be no match";

        public SimpleSearchEngineTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(1, 1,
                    testCaseInput1)).setInput(testCaseInput1),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(3, 4,
                    testCaseInput2)).setInput(testCaseInput2)

            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;
            String[] searchResult;

            int referenceCount, requestsCount;

            //check count of iteration to fill search reference
            try {
                referenceCount = Integer.parseInt(inputLines[0]);
            } catch (NumberFormatException e) {
                return new CheckResult(false, "The number of lines to search must be a number!");
            }

            reference = new String[referenceCount];

            for (int i = 0; i < referenceCount; i++) {
                reference[i] = inputLines[i + 1];
            }

            //check count of iteration to search some string;
            try {
                requestsCount = Integer.parseInt(inputLines[referenceCount + 1]);
            } catch (NumberFormatException e) {
                return new CheckResult(false,
                    "The number of requests to search must be a number or " +
                    "count of reference lines doesn't match input data!");
            }

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (ContainsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i));
                }
            }

            //check found matches accuracy
            int actualTotalMatches = cleanedOutput.size();
            int requiredTotalMatches = 0;
            for (int j = 0; j < requestsCount; j++) {
                String toSearch = inputLines[referenceCount + 2 + j];
                searchResult = Arrays.stream(reference).filter(line -> line.toLowerCase()
                    .contains(toSearch.toLowerCase().trim()))
                    .toArray(String[]::new);

                requiredTotalMatches += searchResult.length;
                List<String> searchedFromOutput;

                try {
                    searchedFromOutput = cleanedOutput
                        .subList(0, searchResult.length);
                } catch (IndexOutOfBoundsException ex) {
                    return new CheckResult(false, "Can't parse your output. " +
                        "Please, make sure your output format matches with one in the example.");
                }


                if (!Arrays.equals(searchedFromOutput.toArray(), searchResult)) {
                    return new CheckResult(false,
                        "Search result is not equal to the expected in search iteration " + j);
                }

                cleanedOutput.subList(0, searchResult.length).clear();
            }
            if (actualTotalMatches != requiredTotalMatches) {
                return new CheckResult(false, "wrong number of found matches!");
            }

            if(referenceCount != clue.referencesCount){
                return new CheckResult(false, "Reference count is incorrect");
            }
            else if(requestsCount != clue.requestsCount){
                return new CheckResult(false, "Search requests count is incorrect");
            }
            else {
                return CheckResult.correct();
            }
        }

        public static boolean ContainsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/66/stages/355/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/66/stages/355/implement">JetBrains
    Academy</a>
  time: Tue, 04 Aug 2020 19:12:21 UTC
record: 1
