type: edu
custom_name: stage3
files:
- name: src/search/Main.java
  visible: true
  text: |
    package search;

    import java.util.Objects;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            final Scanner scanner = new Scanner(System.in);

            System.out.println("Enter the number of people:");
            final int N = Integer.parseInt(scanner.nextLine());

            String[] users = new String[N];
            System.out.println("Enter all people:");
            for (int i = 0; i < N; i++) {
                users[i] = scanner.nextLine();
            }

            System.out.println();
            System.out.println("Enter number of queries:");
            final int M = Integer.parseInt(scanner.nextLine());

            for (int i = 0; i < M; i++) {
                boolean foundSomeone = false;
                System.out.println();
                System.out.println("Enter data to search people:");
                String que = scanner.nextLine();

                for (String user : users) {
                    if (user.toLowerCase().indexOf(que.toLowerCase()) != -1) {
                        System.out.println(user);
                        foundSomeone = true;
                    }
                }
                if (!foundSomeone) {
                    System.out.println("No matching people found.");
                }
            }

            scanner.close();
        }
    }
  learner_created: false
- name: src/search/HashTable.java
  visible: true
  text: |
    package search;

    public class HashTable<T> {
        private int size;
        private TableEntry[] table;
        private int usedSize;

        public HashTable(int size) {
            this.size = size;
            table = new TableEntry[size];
            usedSize = 0;
        }

        public boolean put(int key, T value) {
            if (usedSize == size) rehash();

            int index = findKey(key);

            if (index == -1) {
                return false;
            }

            table[index] = new TableEntry(key, value);
            usedSize++;

            return true;
        }

        public int get(int key, T value) {
            int idx = findKey(key);

            if (idx == -1 || table[idx] == null) {
                return -1;
            }

            return idx;
        }

        private int findKey(int key) {
            int hash = key % size;

            while (!(table[hash] == null || table[hash].getKey() == key)) {
                hash = (hash + 1) % size;

                if (hash == key % size) {
                    return -1;
                }
            }

            return hash;
        }

        private void rehash() {
            final int scalingFactor = 2;

            TableEntry[] oldTable = table;

            size *= scalingFactor;
            this.table = new TableEntry[size];
            usedSize = 0;

            for (TableEntry entry : oldTable) {
                this.put(entry.getKey(), (T) entry.getValue());
            }
        }

        @Override
        public String toString() {
            StringBuilder tableStringBuilder = new StringBuilder();

            for (int i = 0; i < table.length; i++) {
                if (table[i] == null) {
                    tableStringBuilder.append(i + ": null");
                } else {
                    tableStringBuilder.append(i + ": key=" + table[i].getKey()
                            + ", value=" + table[i].getValue());
                }

                if (i < table.length - 1) {
                    tableStringBuilder.append("\n");
                }
            }

            return tableStringBuilder.toString();
        }

        private static int createKey(String word, int length) {
            String ret = "";
            int i = 0;
            while (ret.length() < length && i < word.length()) {
                char ch = word.toCharArray()[i++];
                ret += (int) ch;
            }

            while (ret.length() < length) {
                ret = "0" + ret;
            }

            if (ret.length() > length) {
                ret = ret.substring(0, length);
            }

            return Integer.parseInt(ret);
        }
    }
  learner_created: false
- name: src/search/TableEntry.java
  visible: true
  text: |
    package search;

    public class TableEntry<T> {
        private final int key;
        private final T value;

        public TableEntry(int key, T value) {
            this.key = key;
            this.value = value;
        }

        public int getKey() {
            return key;
        }

        public T getValue() {
            return value;
        }
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import search.Main;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedList;
    import java.util.List;

    class TestClue {
        int referencesCount;
        String input;

        TestClue(int referencesCount, String input) {
            this.referencesCount = referencesCount;
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {

        public static final String names =
            "Dwight Joseph djo@gmail.com\n" +
            "Rene Webb webb@gmail.com\n" +
            "Katie Jacobs\n" +
            "Erick Harrington harrington@gmail.com\n" +
            "Myrtle Medina\n" +
            "Erick Burgess\n";

        public static final String test1 =
            "6\n" +
            names +
            "2\n" +
            "0";

        public static final String test2 =
            "6\n" +
            names +
            "1\n" +
            "burgess\n" +
            "0";

        public static final String test3 =
            "6\n" +
            names +
            "1\n" +
            "erick\n" +
            "0";

        public static final String test4 =
            "6\n" +
            names +
            "3\n" +
            "1\n" +
            "burgess\n" +
            "2\n" +
            "2\n" +
            "1\n" +
            "erick\n" +
            "0";

        public static final String test5 =
            "6\n" +
            names +
            "2\n" +
            "1\n" +
            "@\n" +
            "1\n" +
            "this text never find some match\n" +
            "2\n" +
            "0";

        public static final String test6 =
            "6\n" +
            names +
            "0";

        public SimpleSearchEngineTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {

            List<TestCase<TestClue>> tests = new ArrayList<>();

            for (String input : new String[]{
                test1, test2, test3, test4, test5, test6}) {

                tests.add(new TestCase<TestClue>()
                    .setAttach(new TestClue(6, input))
                    .setInput(input));
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;
            String[] idealSearchResult;

            int referenceCount;

            //check count of iteration to fill search reference
            try {
                referenceCount = Integer.parseInt(inputLines[0]);
            } catch (NumberFormatException e) {
                return new CheckResult(false,
                    "The number of lines to search must be a number!");
            }

            if (referenceCount != clue.referencesCount) {
                return new CheckResult(false,
                    "Count of search source lines not match expected!");
            }

            reference = new String[referenceCount];

            for (int i = 0; i < referenceCount; i++) {
                reference[i] = inputLines[i + 1];
            }

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (ContainsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i));
                }
            }

            int currentInputLine = referenceCount + 1;
            int currentOutputLine = 0;

            int actionType = -1;

            int searchIteration = 1;
            int fullOutputIteration = 1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number" +
                            " or count of search source is wrong!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        String toSearch = inputLines[currentInputLine];

                        currentInputLine++;

                        idealSearchResult = Arrays.stream(reference)
                            .filter(line -> line.toLowerCase()
                            .contains(toSearch.toLowerCase().trim()))
                            .toArray(String[]::new);

                        String[] currentSearchResult = new String[idealSearchResult.length];
                        for (int i = 0; i < currentSearchResult.length; i++) {
                            try {
                                currentSearchResult[i] = cleanedOutput.get(currentOutputLine);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                            currentOutputLine++;
                        }

                        Arrays.sort(currentSearchResult);
                        Arrays.sort(idealSearchResult);

                        if (!Arrays.equals(currentSearchResult, idealSearchResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }

                        searchIteration++;
                        break;

                    case 2:
                        currentInputLine++;

                        String[] currentAll = new String[reference.length];
                        for (int i = 0; i < currentAll.length; i++) {
                            try {
                                currentAll[i] = cleanedOutput.get(currentOutputLine);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                            currentOutputLine++;
                        }

                        Arrays.sort(currentAll);
                        Arrays.sort(reference);

                        if (!Arrays.equals(currentAll, reference)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }
                        fullOutputIteration++;
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        public static boolean ContainsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }

  learner_created: false
feedback_link: https://hyperskill.org/projects/66/stages/356/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/66/stages/356/implement">JetBrains
    Academy</a>
  time: Tue, 04 Aug 2020 19:41:09 UTC
record: 3
